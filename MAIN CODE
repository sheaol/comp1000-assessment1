int pacX, pacY; // PacMan position
int pacSize = 40; // PacMan size
int pacSpeed = 2; // PacMan speed
boolean movingRight = true; // Initial movement direction
int mouthAngle = 45; // Initial mouth angle
long lastMouthChange = 0; // Time tracker for mouth animation
int facingDirection = 1; // 1 for facing right, -1 for facing left

void setup() {
  size(800, 200);
  background(0);
  pacX = width / 2;
  pacY = height / 2;
}

void draw() {
  background(0);
  drawTrack();
  movePacMan();
  drawPacMan();
}

void drawTrack() {
  stroke(0, 0, 255);
  strokeWeight(4);
  line(0, 20, width, 20); // Top blue bar
  line(0, height - 20, width, height - 20); // Bottom blue bar
}

void movePacMan() {
  if (movingRight) {
    pacX += pacSpeed;
    if (pacX >= width) {
      pacX = 0;
    }
    facingDirection = 1;
  } else {
    pacX -= pacSpeed;
    if (pacX <= 0 - pacSize) {
      pacX = width - pacSize;
    }
    facingDirection = -1;
  }
}

void drawPacMan() {
  fill(255, 255, 0);
  arc(pacX, pacY, pacSize, pacSize, radians(mouthAngle), radians(360 - mouthAngle), PIE);
  
  // Update mouth angle for animation
  if (millis() - lastMouthChange > 1000) {
    if (mouthAngle == 45) {
      mouthAngle = 0;
    } else {
      mouthAngle = 45;
    }
    lastMouthChange = millis();
  }
  
  // Draw PacMan outline separately with different color and stroke weight
  noFill();
  stroke(0);
  strokeWeight(2);
  arc(pacX, pacY, pacSize, pacSize, radians(mouthAngle), radians(360 - mouthAngle), PIE);
}

void keyPressed() {
  if (key == ' ') {
    movingRight = !movingRight; // Swap direction
    facingDirection *= -1; // Flip PacMan sprite
  }
}
